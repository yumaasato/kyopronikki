left(i)
  return 2i
right(i)
  return 2i + 1

max-heapify(A,i)
l = left(i)
r = right(i)
if l <= A.heap-size and A[l] > A[i]
  largest = l
else largest = i
if r <= A.heap-size and A[r] > A[largest]
  largest = r
if largest != i
  swap(A[i],A[largest])
  max-heapify(A,largest)

heapsort(A)
  build-max-heap(A)
  for i = A.length downto 2
    swap(A[1], A[i])
    A.heap-size = A.heap-size - 1
    max-heapify(A,1)